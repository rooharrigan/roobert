import * as Koa from 'koa';
import * as Router from 'koa-router';
import * as Logger from 'koa-logger';
import { createConnection } from "typeorm";
import 'reflect-metadata';
import * as config from 'config';
import { createReadStream, readFileSync } from 'fs';
import { SlashCommandPayload, Event, EventCallback, EventCallbackPayload, EventTypes, EventCallbackTypes, EventChallenge } from './types/types_core';
import { SSL_OP_NETSCAPE_CHALLENGE_BUG } from 'constants';

const fs = require('fs');
const path = require('path');
const https = require('https');
const certFile = path.resolve(__dirname, 'ssl/ca.crt');
const views = require('co-views');
const render = views('public', { map: { html: 'swig'}});

const agentOptions = {
  ca: fs.readFileSync(certFile)
};
const agent = new https.Agent(agentOptions);

const { WebClient } = require('@slack/client');
let web = new WebClient(config.get('app.slack_bot_token'), {
	slackApiUrl: 'https://dev737.slack.com/api/',
	agent: agent
});

/*
* Configure app helpers
*/
const app = new Koa();
const router = new Router();
const logger = require('koa-logger');
const koaBody = require('koa-body');

createConnection().then(async connection => {    
    app.use(router.routes());
    app.use(router.allowedMethods());
    app.use(koaBody());
    if (process.env.NODE_ENV == "development") {
        app.use(logger());
    }
}).catch(error => console.log("TypeORM connection error: ", error));

/*
* Homepage with Add to Slack button
*/
router.get('/', async (ctx, next) => {
    const index_page = path.resolve(__dirname, '../html/index.html');
    ctx.type = 'html';
    ctx.body = readFileSync(index_page);
});

/*
* Implement slash command responses
*/
router.post('/commands', koaBody(), async (ctx, next) => {
    const payload = ctx.request.body as SlashCommandPayload;

    switch (payload.text){
        case "api": {
            ctx.body = "";
            web.chat.postMessage({
                channel: payload.channel_id,
                text: "This response was generated by hitting chat.postMessage",
            });
            break;
        }
        default: {
            const ret = {
                "text": "This ephemeral response was sent directly in the body of the response.",
                "attachments": [
                    {
                        "text":"Like a ghost in the crater. :ghost:"
                    }
                ]
            }
            ctx.body = ret;
            break;
        }
    }

    next();
});

/*
* Implement events API and respond to messages
*/
router.post('/events', koaBody(), async (ctx, next) => {

    /* respond to challenge for auth */
    let payload = ctx.request.body as Event;

    switch (payload.type) {
        case EventTypes.EVENT_CALLBACK:
            let callback_payload = ctx.request.body as EventCallback;
            let event_payload = callback_payload.event as EventCallbackPayload;

            switch (event_payload.type) {
                case EventCallbackTypes.LINK_SHARED:
                    ctx.body = "";
                    web.chat.postMessage({
                        channel: event_payload.channel,
                        text: "Thanks for posting a link!",
                    });

                    const unfurls = {
                        "https://www.wholefoods.com" : {
                            "text" : "Get outta here with the whole foods shit. Try Birite.",
                        }
                    };
                    web.chat.unfurl({
                        token: callback_payload.token,
                        channel: event_payload.channel,
                        ts: event_payload.message_ts,
                        unfurls: unfurls,
                    })

                    break;
                default:
                    console.log('we missed it somehow');
                    break;
            }
            break;

        case EventTypes.URL_VERIFICATION:
            let challenge_payload = ctx.request.body as EventChallenge;
            const ret = {
                "challenge": challenge_payload.challenge
            }
            ctx.body = ret;
            break;
        default:
            console.log("You need to add this event type to your types_core.ts: ");
            console.log(payload.type);
            break;
    }

    next();
});

const port = 3000;
const server = app.listen(port);
console.log(
    "Server running on port %d in %s mode",
    port,
    app.env,
);

/*
* Exports for testing
*/
module.exports = app;